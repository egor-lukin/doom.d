* Doom modules
#+begin_src elisp :tangle init.el
(doom! :input
       :completion
       company           ; the ultimate code completion backend
       helm              ; the *other* search engine for love and life
       ;; ido               ; the other *other* search engine...
       ivy               ; a search engine for love and life

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       ;; doom-dashboard    ; a nifty splash screen for Emacs
       ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink the current line after jumping
       ;; neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup            ; tame sudden yet inevitable temporary windows
        +all             ; catch all popups that start with an asterix
        +defaults)       ; default popup rules
       ;;pretty-code       ; replace bits of code with pretty symbols
       ;;tabs              ; an tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;; rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ibuffer           ; interactive buffer management
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; a consistent, cross-platform shell (WIP)
       ;; shell             ; a terminal REPL for Emacs
       ;; term              ; terminals in Emacs
       vterm             ; another terminals in Emacs

       :checkers
       ;; syntax              ; tasing you for every semicolon you forget
       spell             ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       (lookup           ; helps you navigate your code and documentation
        +docsets)        ; ...or in Dash docsets locally
       ;;lsp
       ;;macos             ; MacOS-specific commands
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :lang
       ;;agda              ; types of types of types of types...
       ;;assembly          ; assembly for fun or debugging
       ;; cc                ; C/C++/Obj-C madness
       clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;; crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;; elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp           ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       go                ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;; ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org              ; organize your plain life in plain text
        +roam2
        +dragndrop       ; drag & drop files/images into org buffers
        +hugo            ; use Emacs for hugo blogging
        +jupyter        ; ipython/jupyter support for babel
        +pandoc          ; export-with-pandoc support
        +pomodoro        ; be fruitful with the tomato technique
        +present)        ; using org-mode for presentations
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;; python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ruby              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes

       :email
       (mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;literate
       (default +bindings +smartparens))

#+end_src
* Config
** Basic settings
#+begin_src elisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "Egor Lukin"
      user-mail-address "lukin.net@gmail.com")
#+end_src

# You need to change your terminal emulator preferences to allow login shell.
# Sometimes it is required to use `/bin/bash --login` as the command.
# Please visit https://rvm.io/integration/gnome-terminal/ for a example.
#+begin_src elisp :tangle config.el
(setq multi-term-program-switches "--login")
#+end_src
** UI
Setup Emacs theme:
#+begin_src elisp :tangle config.el
;; (setq doom-theme 'doom-gruvbox-light)
;; (setq doom-theme 'doom-palenight)
;; (setq doom-theme 'doom-moonlight)
(setq doom-theme 'doom-dracula)
#+end_src

Setup font:
#+begin_src elisp :tangle config.el
(setq doom-font (font-spec :family "monospace" :size 42 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 42))
#+end_src

This determines the style of line numbers in effect. If set to `nil', line numbers disabled. For relative line numbers, set this to `relative'.
#+begin_src elisp :tangle config.el
(setq display-line-numbers-type t)
#+end_src
** Org Mode :ATTACH:
:PROPERTIES:
:ID:       6c295031-b966-4f74-a575-135f6a0a4830
:END:
Setup org directory.
#+begin_src elisp :tangle config.el
(after! org
  (setq org-directory "~/org/"))
#+end_src

#+begin_src elisp :tangle config.el
(after! org
  (setq org-todo-keywords
        '((sequence "TODO" "IN-PROGRESS" "WAIT" "SKIP" "DELEGATED" "SCHEDULED" "|" "DONE" "CLOSED" "MOVED")))
  (setq org-agenda-files '("roam/gtd/gtd.org" "roam/gtd/backlog.org" "roam/gtd/routines.org" "roam/gtd/birthday.org" "roam/gtd/scheduled.org")))
#+end_src

#+begin_src elisp :tangle config.el
(setq org-refile-targets
      '(("~/org/roam/gtd/gtd.org" :maxlevel . 2)
        ("~/org/roam/gtd/routines.org" :maxlevel . 2)
        ("~/org/roam/gtd/scheduled.org" :maxlevel . 2)
        ("~/org/roam/gtd/backlog.org" :maxlevel . 2)))
#+end_src

#+begin_src elisp :tangle config.el
(setq org-download-dir "~/Pictures/Screenshots")
#+end_src

#+begin_src elisp :tangle config.el
(after! org
  (setq org-log-done t)
  (setq org-log-into-drawer t))

#+end_src

Set default file for all archived items:
#+begin_src elisp :tangle config.el
(after! org
  (setq org-archive-location "~/org/roam/gtd/archived/09-2022.org::"))
#+end_src
** Org habits
#+begin_src elisp :tangle config.el
(require 'org-habit)
(setq org-habit-show-habits-only-for-today t)
(setq org-habit-preceding-days 25)
(setq org-habit-following-days 3)
#+end_src
** Projectile
#+begin_src elisp :tangle config.el
(setq projectile-project-search-path '("~/Projects/"))
#+end_src
** Search
fuzzy search by default
#+begin_src elisp :tangle config.el
(setq helm-mode-fuzzy-match t)

(setq ivy-re-builders-alist
      '((counsel-ag . regexp-quote)
        (t      . ivy--regex-fuzzy)))
#+end_src
** Ein
#+begin_src elisp :tangle config.el
(setq ein:output-area-inlined-images t)

(map! :leader
      :prefix "j"
      :desc "execute cell" "e" #'ein:worksheet-execute-cell
      :desc "save notebook" "s" #'ein:notebook-save-notebook-command
      :desc "insert below" "b" #'ein:worksheet-insert-cell-below
      :desc "insert below" "a" #'ein:worksheet-insert-cell-after
      :desc "notebook list" "l" #'ein:notebooklist-open
      )
#+end_src
** Google Translate
#+begin_src elisp :tangle config.el
;; Google Translate Integration
(global-set-key "\C-ct" 'google-translate-at-point)
(global-set-key "\C-cr" 'google-translate-at-point-reverse)
(global-set-key "\C-cT" 'google-translate-query-translate)

(setq google-translate-default-source-language '"en")
(setq google-translate-default-target-language '"ru")

(setq google-translate-backend-method 'curl)
#+end_src

Fix problem with searching https://github.com/atykhonov/google-translate/issues/52
#+begin_src elisp :tangle config.el
(use-package google-translate
  ;; :ensure t
  :custom
  (google-translate-backend-method 'curl)
  :config
   (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130)))
#+end_src
** EWW
#+begin_src elisp :tangle config.el
(setq browse-url-browser-function 'eww-browse-url)
(setq eww-download-directory "~/cached-web-pages")

;; Auto-rename new eww buffers
(defun xah-rename-eww-hook ()
  "Rename eww browser's buffer so sites open in new page."
  (rename-buffer "eww" t))
(add-hook 'eww-mode-hook #'xah-rename-eww-hook)
;; C-u M-x eww will force a new eww buffer
(defun modi/force-new-eww-buffer (orig-fun &rest args)
  "When prefix argument is used, a new eww buffer will be created,
regardless of whether the current buffer is in `eww-mode'."
  (if current-prefix-arg
      (with-temp-buffer
        (apply orig-fun args))
    (apply orig-fun args)))
(advice-add 'eww :around #'modi/force-new-eww-buffer)

#+end_src
** Elfeed RSS
#+begin_src elisp :tangle config.el
(after! elfeed
  (setq elfeed-search-filter "@1-month-ago +unread"))
#+end_src
** Org-Roam
#+begin_src elisp :tangle config.el
(defun my/org-roam-node-find-by-directory ()
  (interactive)
  (let* ((directories '("tasks" "literate" "conceptual" "projects" "planning"))
        (directory (completing-read "Enter directory: " directories)))
    (org-roam-node-find t nil
                        (lambda (node)
                          (let ((tags (org-roam-node-tags node)))
                            (member directory tags))))))

(after! org-roam
  (setq org-roam-directory "~/org/roam")
  (setq org-roam-db-location  "~/org/roam/org-roam.db")

  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :target (file+head "%<%Y-%m-%d>.org"
                              "#+title: %<%A, %d %B %Y>\n"))))

  (setq org-roam-capture-templates
        '(("t" "Task note" plain
           "%?"
           :if-new (file+head "tasks/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :tasks\n")
           :unnarrowed t)
          ("l" "Literate note" plain
           "%?"
           :if-new (file+head "literate/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :literate\n")
           :unnarrowed t)
          ("c" "Conceptual note" plain "%?"
           :if-new (file+head "conceptual/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :conceptual\n")
           :unnarrowed t)
          ("r" "Planning note" plain "%?"
           :if-new (file+head "planning/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :planning\n")
           :unnarrowed t)
          ("p" "Project note" plain
           "%?"
           :if-new (file+head "project/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :projects\n")
           :unnarrowed t)))

  (map! :leader
        :prefix "r"
        :desc "org-roam-node-insert" "i" #'org-roam-node-insert
        :desc "org-roam-node-find" "f" #'org-roam-node-find
        :desc "org-roam-node-find-by-directory" "t" #'my/org-roam-node-find-by-directory
        :desc "org-roam-dailies-goto-date" "s" #'org-roam-dailies-goto-date
        :desc "org-roam-dailies-goto-today" "d" #'org-roam-dailies-goto-today
        :desc "org-roam-buffer" "l" #'org-roam-buffer
        :desc "org-roam-show-graph" "g" #'org-roam-show-graph
        :desc "org-roam-dailies-find-next-note" "n" #'org-roam-dailies-find-next-note
        :desc "org-roam-dailies-find-previous-note" "p" #'org-roam-dailies-find-previous-note
        :desc "org-roam-capture" "c" #'org-roam-capture))
#+end_src
** Org-Capture
#+begin_src elisp :tangle config.el
(defun my/daily-note-filename ()
  (let ((date (format-time-string "%Y-%m-%d" (current-time))))
    (concat
     "~/org/roam/daily/"
     date
     ".org")))

;; %Y-%m-%d.org
(after! org
  (setq org-capture-templates
        '(("t" "Todo" entry
           (file+headline "roam/gtd/gtd.org" "Inbox")
           (file "templates/todo.org"))
          ("e" "English word" entry
           (file+headline "anki/english_words.org" "Backlog")
           (file "templates/english_words.org"))
          ("m" "Mental check-in" entry
           (file+headline "roam/20201004170026-mental_health_index.org" "Check-ins")
           (file "templates/mental.org"))
          ("p" "Physical check-in" entry
           (file+headline "roam/20201004170236-physical_health_index.org" "Check-ins")
           (file "templates/mental.org"))
          ("b" "Add entry to daily buffer" entry
           (file+headline (lambda () (my/daily-note-filename)) "buffer")
           (file "templates/buffer.org")))))
#+end_src
** Deft
#+begin_src elisp :tangle config.el
(setq deft-directory "~/org")
(setq deft-extensions '("txt" "tex" "org"))
(setq deft-recursive t)
#+end_src

#+begin_src elisp
(map! :leader
      (:prefix-map ("d" . "deft")
       :desc "deft-find-file" "f" #'deft-find-file))
#+end_src
** Org-Babel
#+begin_src elisp :tangle config.el
(map! :leader
      (:prefix-map ("b" . "babel")
       :desc "org-babel-execute-src-block" "b" #'org-babel-execute-buffer))

(setq org-babel-pry-command "pry")
#+end_src

#+begin_src elisp
;; (defun org-babel-execute:pry (body params)
;;   "Execute a block of ruby code with pry."
;;   (message "executing ruby source code block in pry")
;;   (string-remove-suffix "\\\"" (string-remove-prefix "\"" (string-remove-prefix "[0G" (org-babel-eval "~/.gems/bin/pry" body)))))

(defun org-babel-execute:pry (body params)
  "Execute a block of ruby code with pry."
  (message "executing ruby source code block in pry")
  (substring (org-babel-eval "~/.gems/bin/pry" body) 5 -2))
#+end_src

#+RESULTS:
: org-babel-execute:pry

#+begin_src elisp
(defvar c (org-babel-eval "~/.gems/bin/pry" "hello_world"))

(defvar b
  (string-remove-prefix "[0G"
    (org-babel-eval "~/.gems/bin/pry" "hello_world")))

(string-remove-prefix "\"" (string-remove-suffix "\"" b))
(string-remove-suffix "\\\"" b)
b
c
(defvar d (substring c 5 -2))
d
(print d)

(replace-regexp-in-string "\\\\" "\\" d)
;; (replace-regexp-in-string "\\\\\\(.\\|\n\\)" "\\1" d)
#+end_src

#+begin_src pry :results value raw
hello_world
#+end_src

#+RESULTS:
hello world

#+begin_src ruby

p "hello\nworld"
#+end_src

#+RESULTS:
: hello
: world

org-block formatting

#+begin_src pry :results value raw
question = <<HEREDOC
I want you to act as a Life Coach. Please summarize this non-fiction book, Tools of Titans by Tim Ferris. Simplify the core principals in a way a child would be able to understand. Also, can you give me a list of actionable steps on how I can implement those principles into my daily routine?
HEREDOC

chat_gpt(question)
#+end_src

#+RESULTS:
I want you to act as a Life Coach. Please summarize this non-fiction book, Tools of Titans by Tim Ferris. Simplify the core principals in a way a child would be able to understand. Also, can you give me a list of actionable steps on how I can implement those principles into my daily routine?\n"
"Tools of Titans by Tim Ferriss is a book that shares the success secrets of over 200 world-class performers. The core principles of this book can be simplified as follows: strive to be the best version of yourself, stay focused on your goals, work hard, be persistent, and learn from failure. To implement these principles in your daily life, here are some actionable steps you can take:

Set specific and achievable goals for yourself each day.
Make a plan to achieve those goals and stick to it.
Identify the obstacles that may prevent you from reaching your goals, and come up with strategies to overcome them.
Make time for regular self-reflection and feedback.
Push yourself out of your comfort zone and challenge yourself to learn new skills.
Surround yourself with people who can motivate and inspire you.
Celebrate your successes, no matter how small, and learn from your mistakes.

#+begin_src pry :results value raw
question = <<HEREDOC
list 10 ways to become a better programmer?
HEREDOC

chat_gpt(question)
#+end_src

#+RESULTS:
list 10 ways to become a better programmer?\n"
"Here are 10 ways to become a better programmer: \n\nMake use of resources such as tutorials, books, and online courses.\nPractice, practice, practice.\nLearn a new language.\nWork on open-source projects.\nGet involved in the programming community.\nWrite code for fun.\nDevelop problem-solving skills.\nRefactor existing code.\nLearn about software design patterns.\nKeep up with the latest trends and technologies.\n\n
=> "Here are 10 ways to become a better programmer:\n\nLearn the fundamentals of programming.\nPractice regularly and create projects.\nUtilize resources like books and online tutorials.\nLearn coding best practices.\nGet feedback from experienced developers.\nStay up-to-date on new programming tools and technologies.\nJoin a coding community.\nTake online coding courses.\nAttend hackathons and coding events.\nPair program with experienced developers.\n\n"

** Org-Clock
#+begin_src elisp :tangle config.el
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
(setq org-clock-persist t)
#+end_src
** Openwith
#+begin_src elisp :tangle config.el
(require 'openwith)
(openwith-mode t)
(setq openwith-associations
            (list
             (list (openwith-make-extension-regexp
                    '("mpg" "mpeg" "mp3" "mp4"
                      "avi" "wmv" "wav" "mov" "flv"
                      "ogm" "ogg" "mkv"))
                   "vlc"
                   '(file))
             (list (openwith-make-extension-regexp
                    '("xbm" "pbm" "pgm" "ppm" "pnm"
                      "png" "gif" "bmp" "tif" "jpeg" "jpg"))
                   "eog"
                   '(file))
             '("\\.pdf" "evince" (file))
             '("\\.djvu" "evince" (file))
             ))
#+end_src
** Polybar Integration
Show current active clock in polybar.
#+begin_src elisp :tangle config.el
(defvar polybar--default-header "no active clocks!")

(defun polybar--format-line (task time)
  (concat task " ("(number-to-string time) " min)"))

(defun polybar-current-clock-line ()
  (interactive)
  (message
   (if (org-clocking-p)
       (let ((header org-clock-heading)
             (time
              (floor
               (org-time-convert-to-integer (time-since org-clock-start-time))
               60)))
         (polybar--format-line header time))
     polybar--default-header)))

(map! :leader :prefix "b" :desc "polybar-current-clock-line" "c" #'polybar-current-clock-line)
#+end_src
** Hledger
#+begin_src elisp :tangle config.el
(setq hledger-jfile "~/org/finances/ledger.journal")
#+end_src
** Snippets
#+begin_src elisp :tangle config.el
;; Develop in ~/emacs.d/mysnippets, but also
;; try out snippets in ~/Downloads/interesting-snippets
(setq yas-snippet-dirs '("~/org/snippets"
                         "~/emacs.d/mysnippets"))
#+end_src
** Reverso
Setup my custom script for working with Reverso search:
#+begin_src elisp :tangle packages.el
(package! reverso :recipe (:repo "https://github.com/LukinEgor/reverso-emacs"))
#+end_src

#+begin_src elisp :tangle config.el
(use-package! reverso)
(after! reverso
  (setq reverso-default-source-lang "english")
  (setq reverso-default-target-lang "russian")

  (map! :leader
        :prefix "k"
        :desc "reverso-direct-search" "d" #'reverso-direct-search
        :desc "reverso-reverse-search" "r" #'reverso-reverse-search))
#+end_src
** Yasnippets
** EShell
#+begin_src elisp :tangle config.el
 (defun eshell-load-bash-aliases ()
    "Read Bash aliases and add them to the list of eshell aliases."
    ;; Bash needs to be run - temporarily - interactively
    ;; in order to get the list of aliases.
      (with-temp-buffer
        (call-process "bash" nil '(t nil) nil "-ci" "alias")
        (goto-char (point-min))
        (while (re-search-forward "alias \\(.+\\)='\\(.+\\)'$" nil t)
          (eshell/alias (match-string 1) (match-string 2)))))
#+end_src
** Helm Dash
#+begin_src elisp
(setq helm-dash-docsets-path "~/.docsets")

(map! :leader
      :prefix "l"
      :desc "helm-dash-at-point" "p" #'helm-dash-at-point
      :desc "helm-dash-at-point" "f" #'helm-dash)
#+end_src

** Bookmarks
#+begin_src elisp
(map! :leader
      :prefix "b"
      :desc "list-bookmarks" "l" #'list-bookmarks
      :desc "bookmark-delete" "d" #'bookmark-delete
      :desc "bookmark-set" "s" #'bookmark-set)
#+end_src

** Clipboard
#+begin_src elisp :tangle packages.el
(package! xclip)
#+end_src

#+begin_src elisp :tangle config.el
(xclip-mode 1)
#+end_src
** Misc
Usefull command for deleting file
#+begin_src elisp :tangle config.el
(defun delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if filename
        (if (y-or-n-p (concat "Do you really want to delete file " filename " ?"))
            (progn
              (delete-file filename)
              (message "Deleted file %s." filename)
              (kill-buffer)))
      (message "Not a file visiting buffer!"))))
#+end_src

Command for renaming file
#+begin_src elisp :tangle config.el
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))
#+end_src

Insert photos for selected day
#+begin_src elisp :tangle config.el
(defun org--photos-list ()
  (let* ((date (string-replace "-" "" (org-read-date)))
         (photos-path "~/photos/mobile/DCIM/Camera/")
         (command (concat "ls " photos-path " | grep " date))
         (photo-paths (split-string (shell-command-to-string command) "\n")))
    (seq-reduce
     (lambda (acc time)
       (if (not (string-blank-p time))
           (concat acc "\n"
                   "#+attr_html: :width 750px\n"
                   "[[file:" photos-path time "][" time "]" "]") acc))
     photo-paths "")))

(defun org-insert-photos ()
  (interactive)
  (insert (org--photos-list)))
#+end_src
** Helpers
#+begin_src elisp :tangle config.el
;; (hms-to-pomodoros "1:22")
(defun hms-to-pomodoros (str)
  (/ (hms-to-minutes str) 25))

;; (hms-to-minutes "1:12")
(defun hms-to-minutes (str)
  (let* ((lst (split-string str ":"))
         (hour (nth 0 lst))
         (minute (nth 1 lst)))
    (+ (* (string-to-number hour) 60)
       (string-to-number minute))))
#+end_src
** Whisper
#+begin_src elisp :tangle config.el
(use-package whisper
  :load-path "path/to/whisper.el"
  :bind ("C-H-r" . whisper-run)
  :config
  (setq whisper-install-directory "~/Projects/whisper.cpp"
        whisper-model "base"
        whisper-language "en"
        whisper-translate nil))
#+end_src
** Other
#+begin_src elisp :tangle config.el
(setq docker-tramp-use-names t)

(setq org-use-fast-todo-selection t)

(setq telega-use-docker t)

(winner-mode +1)

(setq org-attach-directory "~/photos/attachments")
#+end_src

* Additional Packages
#+begin_src elisp :tangle packages.el
(package! anki-editor)
(package! tramp-term)
(package! google-translate :pin "6f7b75b2aa1ff4e50b6f1579cafddafae5705dbd")
(package! add-node-modules-path)
(package! prettier-js)
(package! eslint-fix)
(package! tide)
(package! zeal-at-point)
(package! dionysos)
(package! xterm-color)
(package! org-download)
(package! company-tabnine)
(package! graphviz-dot-mode)
(package! kubernetes-evil)
;; (package! org-ql :recipe (:repo "LukinEgor/org-ql" :branch "file-dynamic-blocks"))
(package! org-mind-map)
(package! sound-wav)
(package! cider)
;; (package! helm-dash)
(package! hledger-mode)
(unpin! visual-fill-column)
(package! org-recoll :recipe (:repo "alraban/org-recoll"))
(package! ranger)
(package! ereader)
(package! nov :recipe (:repo "https://depp.brause.cc/nov.el.git"))

(package! telega :pin "b7438f8433ac16eff46828973ea68a4082fe66a2")
(package! magit)
(package! magit-section)

(package! nmcli-wifi :recipe (:repo "https://github.com/LukinEgor/nmcli-wifi"))
(package! whisper :recipe (:repo "https://github.com/natrys/whisper.el.git"))

(package! helm-tramp)
(package! openwith)
(package! org-auto-tangle)
(package! exec-path-from-shell)
(package! ob-async)
#+end_src
